export	_zero
_zero:
push	bp
mov	bp,sp
xor	ax,ax
pop	bp
ret
!BCC_EOS
export	_one
_one:
push	bp
mov	bp,sp
mov	ax,*1
pop	bp
ret
!BCC_EOS
export	_main
_main:
!BCC_EOS
!BCC_EOS
push	bp
mov	bp,sp
add	sp,*-4
call	_zero
mov	-2[bp],ax
!BCC_EOS
mov	ax,-2[bp]
inc	ax
mov	-2[bp],ax
mov	-4[bp],ax
!BCC_EOS
mov	ax,-2[bp]
cmp	ax,*1
je  	.1
.2:
mov	ax,*1
mov	sp,bp
pop	bp
ret
!BCC_EOS
.1:
mov	ax,-4[bp]
cmp	ax,*1
je  	.3
.4:
mov	ax,*1
mov	sp,bp
pop	bp
ret
!BCC_EOS
.3:
call	_one
mov	-2[bp],ax
!BCC_EOS
mov	ax,-2[bp]
dec	ax
mov	-2[bp],ax
mov	-4[bp],ax
!BCC_EOS
mov	ax,-2[bp]
test	ax,ax
je  	.5
.6:
mov	ax,*1
mov	sp,bp
pop	bp
ret
!BCC_EOS
.5:
mov	ax,-4[bp]
test	ax,ax
je  	.7
.8:
mov	ax,*1
mov	sp,bp
pop	bp
ret
!BCC_EOS
.7:
call	_zero
mov	-2[bp],ax
!BCC_EOS
mov	ax,-2[bp]
inc	ax
mov	-2[bp],ax
dec	ax
mov	-4[bp],ax
!BCC_EOS
mov	ax,-2[bp]
cmp	ax,*1
je  	.9
.A:
mov	ax,*1
mov	sp,bp
pop	bp
ret
!BCC_EOS
.9:
mov	ax,-4[bp]
test	ax,ax
je  	.B
.C:
mov	ax,*1
mov	sp,bp
pop	bp
ret
!BCC_EOS
.B:
call	_one
mov	-2[bp],ax
!BCC_EOS
mov	ax,-2[bp]
dec	ax
mov	-2[bp],ax
inc	ax
mov	-4[bp],ax
!BCC_EOS
mov	ax,-2[bp]
test	ax,ax
je  	.D
.E:
mov	ax,*1
mov	sp,bp
pop	bp
ret
!BCC_EOS
.D:
mov	ax,-4[bp]
cmp	ax,*1
je  	.F
.10:
mov	ax,*1
mov	sp,bp
pop	bp
ret
!BCC_EOS
.F:
xor	ax,ax
mov	sp,bp
pop	bp
ret
!BCC_EOS
.data
.bss

! 0 errors detected
